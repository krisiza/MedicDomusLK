// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250115073723_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "de87abcf-69e5-4224-8405-281b9417bc45",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            Firstname = "John",
                            Lastname = "Harris",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8k5e7E4F3wDl92RlTFRp9uY83zQTg/d2jqlf6bZhMML4XS7kFpJiJTOxFwudpA4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ff3e77-ca38-4377-86ba-d9e04bb15d18",
                            Street = "123 Elm Street",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com"
                        },
                        new
                        {
                            Id = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c477be32-e42d-4ae4-a7a2-07fdb606ed10",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            Firstname = "Jane",
                            Lastname = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVDUEtJo32Ct+P2+I2DpwMNTFQQMtt3mswrKQVTTn/eExk0sHQ46YfCdzXtSK2Qxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5d62ceb-1158-42e5-af02-9686221e1d48",
                            Street = "456 Oak Avenue",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com"
                        },
                        new
                        {
                            Id = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5b9b9015-fdbc-4b1b-ad03-a00b2eee65cc",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1qVHr1JYH+VPMSEKL2v9cDM1NkcQrCRZzb7QPZ8fInTJ68CHdTmN1sQDWgCo0xKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "097cf25c-50fd-4a37-bd39-6324132f2327",
                            Street = "789 Pine Lane",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com"
                        },
                        new
                        {
                            Id = "4b0edccf-5d4f-4dc3-aea2-0dec1c716b83",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "40ad1e83-c2be-4854-938b-3fd876d1a123",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            Firstname = "Michael",
                            Lastname = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4j+TOxHw/Y0qNiAkEJdQuBjm6wuphX3ERautrE2a4uPXOyustEWBo0KjKzP22rgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18178c3b-7da3-429e-9a70-2818c7786b43",
                            Street = "321 Maple Court",
                            TownId = 4,
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com"
                        },
                        new
                        {
                            Id = "5875217f-bef2-4ffe-bd9d-f62abb7c5151",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0023599d-79b6-4d4b-b071-973b70ceba06",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSKOMMkZcRqNhFT7VisXBci+blWwdaarkLP71tDOI51iNPonRGLFwp0HHMjtJY1zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffb75a82-5649-403f-b1a3-386ce1e73348",
                            Street = "Main Street 1",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alice.smith"
                        },
                        new
                        {
                            Id = "f6a48a77-22fb-4f07-904a-0f4654c395bb",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "57f6be75-b857-4629-bb33-af68e360b549",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEPWTJ05foYeS93kmhEl8uqNXDvEsvqj5a88gixK9YcV704qchpINCOs5k0Ork4ewJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b71da28-c077-412c-b0c4-56982da29a0f",
                            Street = "Second Avenue 34",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson"
                        },
                        new
                        {
                            Id = "6c2279c0-c299-43af-87d9-1f8f468132d9",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cedfd59f-f06b-4092-9a7f-9179384d857e",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAENKOu+4KbuYjoQYrqX+lRutNAyGDRCSgYEe1YfAfszOqKgD+qEqPsrigTvDWokWRbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95afe3f7-ebe2-4d43-94b7-6938a1b2009a",
                            Street = "Third Lane 5",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams"
                        },
                        new
                        {
                            Id = "46f107fe-a266-4e0a-8670-1c6050e1e6ef",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "192b6e98-9cf0-4548-ada4-eeaeba845f99",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQqIDO7OBIC+p8vejxygCkY2Ujj+dYt2rBvrJox0a8pcs6uGpnOi71M/nhbThQCjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9703202-72c9-4c41-be58-ea66c63f95db",
                            Street = "Fourth Street 78",
                            TownId = 4,
                            TwoFactorEnabled = false,
                            UserName = "david.brown"
                        },
                        new
                        {
                            Id = "d55212aa-2ef6-4b11-ae28-ea7d834841a7",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a8788ce3-6578-4731-b29f-5fdba0eadedd",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAECtRwxB/OM5+cjJU3ZfEBAw0XuDPedL2/WUhMkWFe3BLE7vzUqaT9yu5uXgINgA5jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c400e4d8-e531-4b4d-a030-473d8b964972",
                            Street = "Fifth Avenue 9",
                            TownId = 5,
                            TwoFactorEnabled = false,
                            UserName = "ella.jones"
                        },
                        new
                        {
                            Id = "c53673ae-0e63-4660-b7a8-21877a361300",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4715881f-e9e6-4f1a-9b65-a9722013d5d7",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJOibFZsOcxB1v6ekiGWyvKKJCIWBdTXBEyxnb+Opfw4NFtrhUgRuX0e8UwkmD1CVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c284aa5-63cc-465d-9e4e-1af56d4297c4",
                            Street = "Sixth Road 23",
                            TownId = 6,
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia"
                        },
                        new
                        {
                            Id = "5ad0f591-9f02-4ccb-8bb6-148cb1159900",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "58ff0c64-e2ba-4261-99c4-0ea85f35cb9e",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENoB3JGkgXUEMNaus58V2uzSmIeu565Mv1kgjw5j4VqKycij0R8xUVYU6lpCP/J39Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f95715a-1860-44ad-abb0-06a304cf7c0b",
                            Street = "Seventh Street 11",
                            TownId = 7,
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez"
                        },
                        new
                        {
                            Id = "1386af66-971f-4d39-aed9-b0b8cfe0d3ba",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fa56eebd-8419-4d60-9411-e7960e395e83",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7vUt3oMBr40/GtlgBZoAdOccZ8hxv+MTvk6bztIz/9AjqOHWA70vNpJkL1JAzPqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3c0a937-75a9-4fc1-a5fd-0d3d4f8d1953",
                            Street = "Eighth Avenue 56",
                            TownId = 8,
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez"
                        },
                        new
                        {
                            Id = "b4266ce7-ff9e-47de-93c9-be6b91485f2f",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5d4064f4-15c4-4841-820c-c1ba9df09a05",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAqRoUOuT92b8l5+rjYtyhP9Dr1p4qeQ5A9DKSBGCkqWy6dC4mbO5B7QAZrEOKHvVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6849bcaf-5b62-492f-a687-7084d1dcc024",
                            Street = "Ninth Street 67",
                            TownId = 9,
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee"
                        },
                        new
                        {
                            Id = "aca792bf-dacd-43d5-ac83-9038daf44bbe",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fd5f34a5-1e5d-4371-a21e-dcf6c640a8ac",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGWN1+wiDdGgHCm5NiMrPHd5CephBsqi8lNW13//oFPWGF4OzjPJXDlGyhsXGwWjIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e42bac31-4944-4e14-aeff-c2d233df94e3",
                            Street = "Tenth Boulevard 89",
                            TownId = 10,
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("P");

                    b.HasData(
                        new
                        {
                            Id = "465644e0-4cb9-4f20-818e-35a3701967df",
                            Date = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            Paid = false,
                            PatientId = "b4266ce7-ff9e-47de-93c9-be6b91485f2f",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = "49bcf0ca-e41a-44b6-ab4c-fb6005323cf7",
                            Date = new DateTime(2025, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            Paid = true,
                            PatientId = "1386af66-971f-4d39-aed9-b0b8cfe0d3ba",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = "ba93964c-3302-4af5-aa40-9c5935c9d42a",
                            Date = new DateTime(2025, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            Paid = false,
                            PatientId = "5ad0f591-9f02-4ccb-8bb6-148cb1159900",
                            Price = 110.00m
                        },
                        new
                        {
                            Id = "a3187ad6-2dc8-4bea-8f0f-62f9e36d0f28",
                            Date = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            Paid = true,
                            PatientId = "d55212aa-2ef6-4b11-ae28-ea7d834841a7",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = "61215266-d4e1-49ab-a51a-38e4c2117d59",
                            Date = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            Paid = true,
                            PatientId = "46f107fe-a266-4e0a-8670-1c6050e1e6ef",
                            Price = 345.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.BillService", b =>
                {
                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("BillId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BillServices");

                    b.HasData(
                        new
                        {
                            BillId = "465644e0-4cb9-4f20-818e-35a3701967df",
                            ServiceId = 1
                        },
                        new
                        {
                            BillId = "49bcf0ca-e41a-44b6-ab4c-fb6005323cf7",
                            ServiceId = 2
                        },
                        new
                        {
                            BillId = "ba93964c-3302-4af5-aa40-9c5935c9d42a",
                            ServiceId = 3
                        },
                        new
                        {
                            BillId = "ba93964c-3302-4af5-aa40-9c5935c9d42a",
                            ServiceId = 4
                        },
                        new
                        {
                            BillId = "a3187ad6-2dc8-4bea-8f0f-62f9e36d0f28",
                            ServiceId = 5
                        },
                        new
                        {
                            BillId = "61215266-d4e1-49ab-a51a-38e4c2117d59",
                            ServiceId = 6
                        },
                        new
                        {
                            BillId = "61215266-d4e1-49ab-a51a-38e4c2117d59",
                            ServiceId = 7
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dr. Harris ist spezialisiert auf die Behandlung von Erkrankungen der Knochen, Gelenke und Muskeln und hilft Patienten, sich von Verletzungen und Operationen zu erholen. Mit seiner Expertise in der Orthopädie und Rehabilitation bietet er maßgeschneiderte Behandlungspläne, die sowohl konservative Therapieansätze als auch operative Eingriffe umfassen. Dr. Harris behandelt eine Vielzahl von Erkrankungen wie Arthritis, Bandscheibenvorfälle, Knochenbrüche und Sportverletzungen. Durch moderne diagnostische Verfahren und präzise therapeutische Maßnahmen sorgt er dafür, dass Patienten eine schnelle und vollständige Genesung erfahren. Zusätzlich legt er großen Wert auf die Prävention von orthopädischen Problemen und berät seine Patienten zu ergonomischen Praktiken, Sport und Übungen, die die Muskulatur stärken und Verletzungen vorbeugen. Mit einem empathischen Ansatz begleitet er seine Patienten während des gesamten Heilungsprozesses und stellt sicher, dass sie zu einer besseren Lebensqualität zurückkehren.",
                            DoctorId = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            ExperienceYear = 20,
                            Img = "https://www.teleclinic.com/wp-content/uploads/teleclinic-hero-slider-1-image-6.webp",
                            Score = 10.0,
                            Sector = "Orthopäde"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dr. Smith konzentriert sich auf die Hautpflege und hilft Patienten bei einer Vielzahl von Hauterkrankungen, darunter Akne, Ekzeme und Psoriasis. Mit ihrer langjährigen Erfahrung in der Dermatologie bietet sie sowohl medizinische Behandlungen als auch ästhetische Lösungen an, um das Hautbild ihrer Patienten zu verbessern. Sie verwendet modernste Technologien und Verfahren, um Hautkrankheiten effektiv zu behandeln und das Wohlbefinden ihrer Patienten zu steigern. Dr. Clarke legt großen Wert auf eine individuelle Beratung und maßgeschneiderte Behandlungskonzepte, die den spezifischen Bedürfnissen jedes Patienten gerecht werden. Sie setzt sich zudem für die Prävention von Hautkrebs ein und bietet regelmäßige Hautscreenings zur frühzeitigen Erkennung von Hautveränderungen an. Mit ihrer empathischen und professionellen Art sorgt Dr. Clarke dafür, dass ihre Patienten nicht nur medizinische Hilfe erhalten, sondern sich auch in ihrer Haut wieder wohlfühlen.",
                            DoctorId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            ExperienceYear = 9,
                            Img = "https://www.collinsdictionary.com/images/full/doctor_117169531.jpg",
                            Score = 9.4399999999999995,
                            Sector = "Dermatologin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dr. Johnson ist spezialisiert auf die Behandlung von Kindern und sorgt für deren gesundes Wachstum und Entwicklung. Sie ist bekannt für ihre einfühlsame Betreuung und ihre Fähigkeit, eine vertrauensvolle Verbindung zu jungen Patienten und ihren Familien aufzubauen. Ihr Schwerpunkt liegt auf der Prävention von Krankheiten sowie der Diagnose und Behandlung von kindlichen Gesundheitsproblemen, um eine optimale Entwicklung zu fördern. Dr. Roy setzt sich dafür ein, dass jedes Kind die beste medizinische Versorgung erhält, mit besonderem Augenmerk auf deren emotionales Wohlbefinden während der Behandlung. Sie arbeitet eng mit den Eltern zusammen, um individuelle Gesundheitspläne zu erstellen, die auf die Bedürfnisse jedes einzelnen Kindes abgestimmt sind.",
                            DoctorId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            ExperienceYear = 5,
                            Img = "https://img.freepik.com/fotos-kostenlos/schoene-junge-aerztin-die-kamera-im-buero-betrachtet_1301-7807.jpg",
                            Score = 9.9000000000000004,
                            Sector = "Pädiaterin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dr. Garcia ist ein führender Kardiologe mit umfassender Erfahrung in der Diagnose und Behandlung von Herzkrankheiten. Er hat sich auf die Behandlung von Herzinsuffizienz, koronaren Herzkrankheiten, Bluthochdruck und anderen kardiovaskulären Erkrankungen spezialisiert. Dr. Smith nutzt modernste diagnostische Verfahren wie EKG, Herzultraschall und Belastungstests, um eine präzise Diagnose zu stellen. Er legt großen Wert auf eine ganzheitliche Betreuung seiner Patienten, indem er individuelle Therapiepläne erstellt, die sowohl medikamentöse Behandlungen als auch Änderungen des Lebensstils umfassen. Darüber hinaus engagiert sich Dr. Smith aktiv in der Prävention von Herzkrankheiten und bietet seinen Patienten wertvolle Informationen zur gesunden Ernährung, regelmäßiger Bewegung und Stressbewältigung. Durch seine Expertise und einfühlsame Art hilft er seinen Patienten, ihre Lebensqualität zu verbessern und ihre Herzgesundheit langfristig zu erhalten.",
                            DoctorId = "4b0edccf-5d4f-4dc3-aea2-0dec1c716b83",
                            ExperienceYear = 17,
                            Img = "https://media.istockphoto.com/id/177373093/photo/indian-male-doctor.jpg?s=612x612&w=0&k=20&c=5FkfKdCYERkAg65cQtdqeO_D0JMv6vrEdPw3mX1Lkfg=",
                            Score = 9.3000000000000007,
                            Sector = "Kardiologe"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "DateStart");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            PatientId = "5875217f-bef2-4ffe-bd9d-f62abb7c5151",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 10, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            PatientId = "f6a48a77-22fb-4f07-904a-0f4654c395bb",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 11, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            PatientId = "6c2279c0-c299-43af-87d9-1f8f468132d9",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 12, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "4b0edccf-5d4f-4dc3-aea2-0dec1c716b83",
                            PatientId = "46f107fe-a266-4e0a-8670-1c6050e1e6ef",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 13, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            PatientId = "c53673ae-0e63-4660-b7a8-21877a361300",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            PatientId = "5ad0f591-9f02-4ccb-8bb6-148cb1159900",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 16, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            PatientId = "1386af66-971f-4d39-aed9-b0b8cfe0d3ba",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 17, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "4b0edccf-5d4f-4dc3-aea2-0dec1c716b83",
                            PatientId = "b4266ce7-ff9e-47de-93c9-be6b91485f2f",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 18, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Roentgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hoertest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauss",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Koetzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwoehr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "94fd393e-f757-40c6-841e-8d77b2317103",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d884af72-adc2-4715-81c6-e7fed27d10c1",
                            RoleId = "94fd393e-f757-40c6-841e-8d77b2317103"
                        },
                        new
                        {
                            UserId = "abdf7ffa-2b33-4ca6-b333-238a3216ceaf",
                            RoleId = "94fd393e-f757-40c6-841e-8d77b2317103"
                        },
                        new
                        {
                            UserId = "d0a08a30-f0a9-40ff-a01b-05e04bb62a35",
                            RoleId = "94fd393e-f757-40c6-841e-8d77b2317103"
                        },
                        new
                        {
                            UserId = "4b0edccf-5d4f-4dc3-aea2-0dec1c716b83",
                            RoleId = "94fd393e-f757-40c6-841e-8d77b2317103"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Bill", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.BillService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Bill", null)
                        .WithMany("Services")
                        .HasForeignKey("BillId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Bill", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
