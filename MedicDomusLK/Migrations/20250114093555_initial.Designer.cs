// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114093555_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dr. Harris ist spezialisiert auf die Behandlung von Erkrankungen der Knochen, Gelenke und Muskeln und hilft Patienten, sich von Verletzungen und Operationen zu erholen. Mit seiner Expertise in der Orthopädie und Rehabilitation bietet er maßgeschneiderte Behandlungspläne, die sowohl konservative Therapieansätze als auch operative Eingriffe umfassen. Dr. Harris behandelt eine Vielzahl von Erkrankungen wie Arthritis, Bandscheibenvorfälle, Knochenbrüche und Sportverletzungen. Durch moderne diagnostische Verfahren und präzise therapeutische Maßnahmen sorgt er dafür, dass Patienten eine schnelle und vollständige Genesung erfahren. Zusätzlich legt er großen Wert auf die Prävention von orthopädischen Problemen und berät seine Patienten zu ergonomischen Praktiken, Sport und Übungen, die die Muskulatur stärken und Verletzungen vorbeugen. Mit einem empathischen Ansatz begleitet er seine Patienten während des gesamten Heilungsprozesses und stellt sicher, dass sie zu einer besseren Lebensqualität zurückkehren.",
                            DoctorId = "5ac4a948-83a7-46ac-ab68-dcab3380f7b7",
                            ExperienceYear = 20,
                            Img = "https://www.teleclinic.com/wp-content/uploads/teleclinic-hero-slider-1-image-6.webp",
                            Score = 10.0,
                            Sector = "Orthopäde"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dr. Smith konzentriert sich auf die Hautpflege und hilft Patienten bei einer Vielzahl von Hauterkrankungen, darunter Akne, Ekzeme und Psoriasis. Mit ihrer langjährigen Erfahrung in der Dermatologie bietet sie sowohl medizinische Behandlungen als auch ästhetische Lösungen an, um das Hautbild ihrer Patienten zu verbessern. Sie verwendet modernste Technologien und Verfahren, um Hautkrankheiten effektiv zu behandeln und das Wohlbefinden ihrer Patienten zu steigern. Dr. Clarke legt großen Wert auf eine individuelle Beratung und maßgeschneiderte Behandlungskonzepte, die den spezifischen Bedürfnissen jedes Patienten gerecht werden. Sie setzt sich zudem für die Prävention von Hautkrebs ein und bietet regelmäßige Hautscreenings zur frühzeitigen Erkennung von Hautveränderungen an. Mit ihrer empathischen und professionellen Art sorgt Dr. Clarke dafür, dass ihre Patienten nicht nur medizinische Hilfe erhalten, sondern sich auch in ihrer Haut wieder wohlfühlen.",
                            DoctorId = "6e0ad939-2b4e-433d-85e5-68e78ffa531e",
                            ExperienceYear = 9,
                            Img = "https://www.collinsdictionary.com/images/full/doctor_117169531.jpg",
                            Score = 9.4399999999999995,
                            Sector = "Dermatologin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dr. Johnson ist spezialisiert auf die Behandlung von Kindern und sorgt für deren gesundes Wachstum und Entwicklung. Sie ist bekannt für ihre einfühlsame Betreuung und ihre Fähigkeit, eine vertrauensvolle Verbindung zu jungen Patienten und ihren Familien aufzubauen. Ihr Schwerpunkt liegt auf der Prävention von Krankheiten sowie der Diagnose und Behandlung von kindlichen Gesundheitsproblemen, um eine optimale Entwicklung zu fördern. Dr. Roy setzt sich dafür ein, dass jedes Kind die beste medizinische Versorgung erhält, mit besonderem Augenmerk auf deren emotionales Wohlbefinden während der Behandlung. Sie arbeitet eng mit den Eltern zusammen, um individuelle Gesundheitspläne zu erstellen, die auf die Bedürfnisse jedes einzelnen Kindes abgestimmt sind.",
                            DoctorId = "fcf88b80-400d-459b-9738-59934a2e1147",
                            ExperienceYear = 5,
                            Img = "https://img.freepik.com/fotos-kostenlos/schoene-junge-aerztin-die-kamera-im-buero-betrachtet_1301-7807.jpg",
                            Score = 9.9000000000000004,
                            Sector = "Pädiaterin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dr. Garcia ist ein führender Kardiologe mit umfassender Erfahrung in der Diagnose und Behandlung von Herzkrankheiten. Er hat sich auf die Behandlung von Herzinsuffizienz, koronaren Herzkrankheiten, Bluthochdruck und anderen kardiovaskulären Erkrankungen spezialisiert. Dr. Smith nutzt modernste diagnostische Verfahren wie EKG, Herzultraschall und Belastungstests, um eine präzise Diagnose zu stellen. Er legt großen Wert auf eine ganzheitliche Betreuung seiner Patienten, indem er individuelle Therapiepläne erstellt, die sowohl medikamentöse Behandlungen als auch Änderungen des Lebensstils umfassen. Darüber hinaus engagiert sich Dr. Smith aktiv in der Prävention von Herzkrankheiten und bietet seinen Patienten wertvolle Informationen zur gesunden Ernährung, regelmäßiger Bewegung und Stressbewältigung. Durch seine Expertise und einfühlsame Art hilft er seinen Patienten, ihre Lebensqualität zu verbessern und ihre Herzgesundheit langfristig zu erhalten.",
                            DoctorId = "6614bff5-a4eb-42a5-8e10-e8f2139d04c0",
                            ExperienceYear = 17,
                            Img = "https://media.istockphoto.com/id/177373093/photo/indian-male-doctor.jpg?s=612x612&w=0&k=20&c=5FkfKdCYERkAg65cQtdqeO_D0JMv6vrEdPw3mX1Lkfg=",
                            Score = 9.3000000000000007,
                            Sector = "Kardiologe"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "DateStart");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "5ac4a948-83a7-46ac-ab68-dcab3380f7b7",
                            PatientId = "5f3e1ff5-daa2-4257-bab1-a29998b4d17f",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 10, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "6e0ad939-2b4e-433d-85e5-68e78ffa531e",
                            PatientId = "da2ecf80-5300-4a27-bc8f-c3450c2ee26e",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 11, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "fcf88b80-400d-459b-9738-59934a2e1147",
                            PatientId = "d0431988-d9ee-42f8-9034-8dd817f467e8",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 12, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "6614bff5-a4eb-42a5-8e10-e8f2139d04c0",
                            PatientId = "d2b20c09-455b-4f27-842f-8b197a22d538",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 13, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "5ac4a948-83a7-46ac-ab68-dcab3380f7b7",
                            PatientId = "aa84e156-5d87-43ac-9568-c44b93682083",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "6e0ad939-2b4e-433d-85e5-68e78ffa531e",
                            PatientId = "8198dff8-b4ff-42ae-8ad1-eabbc419df13",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 16, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "fcf88b80-400d-459b-9738-59934a2e1147",
                            PatientId = "46acd8b9-3ec9-465e-8bec-d8b91005d413",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 17, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "6614bff5-a4eb-42a5-8e10-e8f2139d04c0",
                            PatientId = "24b4d3f9-dfa7-439a-ba39-98ac60c62928",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 18, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Roentgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hoertest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauss",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Koetzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwoehr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "53f26c91-1f7f-4974-b639-687622fb956e",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5ac4a948-83a7-46ac-ab68-dcab3380f7b7",
                            RoleId = "53f26c91-1f7f-4974-b639-687622fb956e"
                        },
                        new
                        {
                            UserId = "6e0ad939-2b4e-433d-85e5-68e78ffa531e",
                            RoleId = "53f26c91-1f7f-4974-b639-687622fb956e"
                        },
                        new
                        {
                            UserId = "fcf88b80-400d-459b-9738-59934a2e1147",
                            RoleId = "53f26c91-1f7f-4974-b639-687622fb956e"
                        },
                        new
                        {
                            UserId = "6614bff5-a4eb-42a5-8e10-e8f2139d04c0",
                            RoleId = "53f26c91-1f7f-4974-b639-687622fb956e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "5ac4a948-83a7-46ac-ab68-dcab3380f7b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2242ff9e-3156-49f6-9869-1fd82543dda7",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxLOqx1/A0Iz8LpYW661JRwvukm9gI/86SjnSMpLvLSXWrfSOPBSL/ADL4XVRJfuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f818cd6a-7c38-4911-8277-708d20fd0032",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Harris",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "6e0ad939-2b4e-433d-85e5-68e78ffa531e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75040278-8028-45ba-8f6d-7ef5e0c43d3e",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaHUBwtSUtJrRX6kuntQ8qjmobWpFgq/BC8rpi6k97OfdCtiAs9l24xXcqzzdGpQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb88eaaf-c29d-4cc0-8841-43031f2e3867",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "fcf88b80-400d-459b-9738-59934a2e1147",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9630d53-d9ee-49b8-9842-120ed9321323",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGzmP3c7IpxoQSQhBwHpV3xZe2pR99i+vJREtyK8wYB34jC7OwV2ikgzKmH3Cr81tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2baf9f9-39c1-4ec1-8390-d805f5ccfc2e",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "6614bff5-a4eb-42a5-8e10-e8f2139d04c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c95411e9-6434-44a1-a7d7-69b971f97083",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHlffR3p998wLB0x32Am60KPJJmfsLj1VKR9myIXonQlfny0bUzJKuD62nePNWR1mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1496a58-8059-438a-a2b9-7b7e4f388abb",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Garcia",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "5f3e1ff5-daa2-4257-bab1-a29998b4d17f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9287642b-dc1d-475b-8e4f-18bcb721bf9b",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgUV/s+wOfHyH6p1dFQAbgzK+S5Chij7EdTTZ1t/atxjM7nwzHOIQaTip3tErDANg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60367076-c2cf-4928-b0a1-2990f5f6e1a1",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith",
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            Street = "Main Street 1",
                            TownId = 1
                        },
                        new
                        {
                            Id = "da2ecf80-5300-4a27-bc8f-c3450c2ee26e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e810bed4-6ed8-406e-b320-0a27ff174ac2",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMZMfII55ka77cQKqxTzHK/oieQtC9TUHff+OK76LwJPea4BkGAtUX0aaykQd8oOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfed5b68-1729-466d-92ea-78927d8bee8a",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson",
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            Street = "Second Avenue 34",
                            TownId = 2
                        },
                        new
                        {
                            Id = "d0431988-d9ee-42f8-9034-8dd817f467e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b768ff4c-7089-4c73-8539-5b51a801b9eb",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjpXxxJ7xuhHAPTpHaSBFZkJsK5FaBrEsgdkWlLXLOgX6O2PZiZEuszDez6/BCkSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "182ed173-b78d-4d2b-88e0-33df0e3460c9",
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams",
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            Street = "Third Lane 5",
                            TownId = 3
                        },
                        new
                        {
                            Id = "d2b20c09-455b-4f27-842f-8b197a22d538",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db516e39-e838-4903-bf5f-da8f306f294c",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEME6HibzgIFqvFk9ZubZX/YK5NM2qknguCJ/dyQGn5XGggmJrHy4z3PBD2AiubJ7Bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e615c3e5-8287-45cf-8e21-0c47277411b0",
                            TwoFactorEnabled = false,
                            UserName = "david.brown",
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            Street = "Fourth Street 78",
                            TownId = 4
                        },
                        new
                        {
                            Id = "d99990c7-cc98-4682-a82d-bb17f238fc80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95122dc9-c982-418d-b728-df7506aa42dd",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEKZNZJq7fNR29QrYcVUW70wjIH/ljLNIrenJ3Xl7wFiKK5wno9YYN1wcuE+Ohrxfmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d22cda4e-3bd0-4ef0-ad02-29a11c384054",
                            TwoFactorEnabled = false,
                            UserName = "ella.jones",
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            Street = "Fifth Avenue 9",
                            TownId = 5
                        },
                        new
                        {
                            Id = "aa84e156-5d87-43ac-9568-c44b93682083",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a2e0312-d6b1-402f-a6ba-f9a185f25b2b",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEK1hx2Ug9nsRPjD+VhiuxVC5XirGfNQLRtF6/3sUQzFAw6Xlni3e1VD4OKCgwU8iVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11d837db-1c7a-496d-b326-74c80b783732",
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia",
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            Street = "Sixth Road 23",
                            TownId = 6
                        },
                        new
                        {
                            Id = "8198dff8-b4ff-42ae-8ad1-eabbc419df13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41114e92-3263-44d5-945c-4ddcbe2ce33e",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELFHaH9nhu3H2MlhLDuRrdZqekijeTWxB1NAZ1O79IhRt1A6LxcIfQtUaK6MlLYTHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cb7b2b3-06bb-4643-90af-1099c2b29bd9",
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez",
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            Street = "Seventh Street 11",
                            TownId = 7
                        },
                        new
                        {
                            Id = "46acd8b9-3ec9-465e-8bec-d8b91005d413",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0dfe75d-fcfe-4e8d-84fa-0a7964969431",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMyd5OSfCGn8dmIiC0XyOTzkzXMJhZP0gyNLEkdXomzM8+hc4jYrKEwdm/dreNLFIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74840530-4d85-43cb-ad08-e146b8b206fc",
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez",
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            Street = "Eighth Avenue 56",
                            TownId = 8
                        },
                        new
                        {
                            Id = "24b4d3f9-dfa7-439a-ba39-98ac60c62928",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "347f2bfa-087f-4361-beb6-93f4eec5be47",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJX2nnXM/+XgDJxdYXOh/9ZJ/AKI6iT4DBABS1qsi7QBTyYnkdRqYWZxvkTxaTXh3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b716d816-ce57-4c32-a183-1e48a76f1eb4",
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee",
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            Street = "Ninth Street 67",
                            TownId = 9
                        },
                        new
                        {
                            Id = "9b5909cf-333a-4030-8a46-ce3948c0e4ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8897162-8738-4a6e-ac5a-9b1bdc86b855",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECUT/0zX/+Nyl0ErzIW68rT/nmcSqZei/5y0ML6PHP4gRAu500+N/JYlz5JQqXLxcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0a7ab7-ed7d-439d-96ef-5005c0ae8a27",
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez",
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            Street = "Tenth Boulevard 89",
                            TownId = 10
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
