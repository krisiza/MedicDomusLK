// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113071912_enddate")]
    partial class enddate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "DateStart");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "8402ec25-6fab-4ec5-bdc2-47878b6831c0",
                            PatientId = "935effba-cca7-4ab7-b3f8-2149e3b5b8dd",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "9c0558d7-b87b-4ab7-a80a-9ef96a18ad31",
                            PatientId = "93d4e279-e388-478d-860e-5f4d9e9e4873",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "55ab853d-5b2d-4688-9940-e867e950d84c",
                            PatientId = "99a67a79-26b5-4fda-b19f-f00f9b2a6cad",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "51b3247a-034d-4fee-bd48-7643609fe486",
                            PatientId = "4a3291ef-8a09-4b97-9b72-608bf9f811da",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "99377057-4fd6-4bb7-83a4-ea8aed83c88a",
                            PatientId = "d5bfaee1-adfb-4af2-9ede-07ae8117ec52",
                            ServiceId = 5,
                            DateStart = new DateTime(2025, 1, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "8402ec25-6fab-4ec5-bdc2-47878b6831c0",
                            PatientId = "b80697df-d98b-46e8-8ef8-7204f62d94e1",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "9c0558d7-b87b-4ab7-a80a-9ef96a18ad31",
                            PatientId = "749e047b-3964-4240-aa08-dd732222c341",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "55ab853d-5b2d-4688-9940-e867e950d84c",
                            PatientId = "40b52a9a-5ab8-47b2-808c-7ab8244e5cb4",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "51b3247a-034d-4fee-bd48-7643609fe486",
                            PatientId = "41afaf33-b1f7-4b03-bc86-e272906487f7",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "99377057-4fd6-4bb7-83a4-ea8aed83c88a",
                            PatientId = "95b70e62-5023-4dc8-b6c6-7dc1e4911264",
                            ServiceId = 5,
                            DateStart = new DateTime(2025, 1, 19, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "R�ntgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "H�rtest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrau�",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad K�tzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenw�hr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5b636c5d-47b7-4b58-9428-e8fa35cab56c",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8402ec25-6fab-4ec5-bdc2-47878b6831c0",
                            RoleId = "5b636c5d-47b7-4b58-9428-e8fa35cab56c"
                        },
                        new
                        {
                            UserId = "9c0558d7-b87b-4ab7-a80a-9ef96a18ad31",
                            RoleId = "5b636c5d-47b7-4b58-9428-e8fa35cab56c"
                        },
                        new
                        {
                            UserId = "55ab853d-5b2d-4688-9940-e867e950d84c",
                            RoleId = "5b636c5d-47b7-4b58-9428-e8fa35cab56c"
                        },
                        new
                        {
                            UserId = "51b3247a-034d-4fee-bd48-7643609fe486",
                            RoleId = "5b636c5d-47b7-4b58-9428-e8fa35cab56c"
                        },
                        new
                        {
                            UserId = "99377057-4fd6-4bb7-83a4-ea8aed83c88a",
                            RoleId = "5b636c5d-47b7-4b58-9428-e8fa35cab56c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8402ec25-6fab-4ec5-bdc2-47878b6831c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51927cd3-fa43-4bfd-ab71-0095d904881d",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECUMVn0Q59hLm9QSI+UI51Xujsd5UcxCzCgw5j9nQloW0YskibxoxbbMHbcPnVyGCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c691c12a-9f71-40a0-892f-cdcf077cf018",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Doe",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "9c0558d7-b87b-4ab7-a80a-9ef96a18ad31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8ecc648-0a04-44d7-9762-188c3c7986b9",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPGsBifHcjXDrQe28mGfHk3I0QwRZvEdGm9nCXdnkRoLeR/P4HkvinY92Q6XLjSF6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dab2e2b1-5e21-422e-9b94-babb96807fd1",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "55ab853d-5b2d-4688-9940-e867e950d84c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5aa7ced-ee09-4acb-9719-d2731b8e4218",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENF2oK8nZa4pwvwiwLWzGR5uMoE6banXOcVvuyYMSHpCPAVABxJBXwU70uvhNoJ1QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1443939-ff1d-4dcb-9143-db42924b70ae",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "51b3247a-034d-4fee-bd48-7643609fe486",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be71f956-1053-4fcd-b287-d0d171bab19f",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELy3ysMDDvmrhhlt8oR0jH+IaWQ4Ni0r6cd6hHYXwE9CL1VkzvYFtvXwr4GJeP531w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c512be35-93a0-4b67-9345-89ac62494574",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Brown",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "99377057-4fd6-4bb7-83a4-ea8aed83c88a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93baf30c-6a3f-43bd-9d17-ba916f7cba94",
                            Email = "doctor5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR5@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIH5/xMv63GfllWrhcGe9C5CMyb7B+Rq9C96k5Lcgogy8fM7ZhDIQh+0qURLAs9BsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2fc0608-a94b-4de5-aa78-eb67b4e1a05a",
                            TwoFactorEnabled = false,
                            UserName = "doctor5@example.com",
                            Birthdate = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sarah",
                            Lastname = "Davis",
                            Street = "654 Birch Blvd",
                            TownId = 5
                        },
                        new
                        {
                            Id = "935effba-cca7-4ab7-b3f8-2149e3b5b8dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab5029ed-2453-4e60-97f1-fbca646f37eb",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaRqrXfU5USP+l5BVjF3qAEUZcpitC+WWZZsU9gxzxfILCV6gNjKX4K7xFUO1ypWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e48e4111-4577-4c7b-ae3f-62a55322c8e6",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith",
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            Street = "Main Street 1",
                            TownId = 1
                        },
                        new
                        {
                            Id = "93d4e279-e388-478d-860e-5f4d9e9e4873",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2481794-61f2-4ceb-a54a-7928452252ce",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAECaVYt8gJHM2R+YtAnSoweu9V1hEkacljfp9g/lnfmBYuL1Q2w0ulv3xYDGtuRcRvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3364866-b6aa-4632-aa7a-3b4224ca0c9c",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson",
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            Street = "Second Avenue 34",
                            TownId = 2
                        },
                        new
                        {
                            Id = "99a67a79-26b5-4fda-b19f-f00f9b2a6cad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92365080-651b-4958-aea1-b4154ea96bbe",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPza5fWdNDVfKQWsUzl5g772nnrsxm5VZUIacvcsITibE/E3JMA0vz4Ge6predCfJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbf5e425-0551-4663-86be-ad0567c1cd67",
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams",
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            Street = "Third Lane 5",
                            TownId = 3
                        },
                        new
                        {
                            Id = "4a3291ef-8a09-4b97-9b72-608bf9f811da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dcce120-f7b7-44da-84b1-b690dc7038b1",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIk9mrZcoNUwj1xabhY8sm/+/wWKnnaK68w6YgUot3cxk54J/RoMKEFJz+av8UCAPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8109e44c-b926-4868-9956-40617d0e52c8",
                            TwoFactorEnabled = false,
                            UserName = "david.brown",
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            Street = "Fourth Street 78",
                            TownId = 4
                        },
                        new
                        {
                            Id = "d5bfaee1-adfb-4af2-9ede-07ae8117ec52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e96b0a3d-418c-47c5-a1c1-65b191f38884",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEJwBv+qIoIJzjuIbPQygzspZtf8GIMp7l0Wm6K1b4nSPPuuOCl1QumPSw1Bgv1KOpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62b415fa-ec4b-4cc3-9d23-096caa21ccb0",
                            TwoFactorEnabled = false,
                            UserName = "ella.jones",
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            Street = "Fifth Avenue 9",
                            TownId = 5
                        },
                        new
                        {
                            Id = "b80697df-d98b-46e8-8ef8-7204f62d94e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29339247-f0a5-47bd-99ac-f9e6352d1a4c",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfEuESa0nH10OB+z4Jm2iTI5B50E86ta2+sVcLCJzybjfBfWThxaTlVVF6vY+ZHAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1b4a373-34cb-4cbd-a21e-e3ea7ee0c904",
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia",
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            Street = "Sixth Road 23",
                            TownId = 6
                        },
                        new
                        {
                            Id = "749e047b-3964-4240-aa08-dd732222c341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d4ec39a-baa8-46cd-8c26-459113c4a3d4",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELNogTsKiCCpHFx/HKr8F00x6qdMPC5knyg0/BeAjie+i1yCht9652nSAur1RrqlcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9f0becb-ae75-4a0f-a82c-a445228748a0",
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez",
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            Street = "Seventh Street 11",
                            TownId = 7
                        },
                        new
                        {
                            Id = "40b52a9a-5ab8-47b2-808c-7ab8244e5cb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c2f09e3-c588-4fb1-ab76-698a69401454",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH174RHmfttWX8n4XKaAKXSFbltd+TBfQ0NHPHiRIar0OaK5sdgYuif+b0ALCHCp4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0671b7af-6be5-4974-9b32-e69f7bfd9368",
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez",
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            Street = "Eighth Avenue 56",
                            TownId = 8
                        },
                        new
                        {
                            Id = "41afaf33-b1f7-4b03-bc86-e272906487f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d10ecc58-d34d-4162-9bc6-031ef21ee9e7",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEByLa7ycU4LGUjwa6LxpOGpdS/n/rMAnCDudytBnE8liWQDLZfdpIalHTe0Hxu4CVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3fcdf21-f666-49fe-bff4-2f1e337ee971",
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee",
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            Street = "Ninth Street 67",
                            TownId = 9
                        },
                        new
                        {
                            Id = "95b70e62-5023-4dc8-b6c6-7dc1e4911264",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6d6520f-20e6-40a5-8475-3d34a70602c2",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOsjVn0IqW1HawlJlRN4Va7wVuHv2b4ofA6RSPsezoPCwzdOhf7UDQf9RTjIlUKi8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89832225-f1e8-4a3b-b7d9-94bb40e3c538",
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez",
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            Street = "Tenth Boulevard 89",
                            TownId = 10
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
