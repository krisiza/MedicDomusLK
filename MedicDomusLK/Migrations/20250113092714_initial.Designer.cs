// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113092714_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfoPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dr. Harris ist spezialisiert auf die Behandlung von Erkrankungen der Knochen, Gelenke und Muskeln und hilft Patienten, sich von Verletzungen und Operationen zu erholen. Mit seiner Expertise in der Orthopädie und Rehabilitation bietet er maßgeschneiderte Behandlungspläne, die sowohl konservative Therapieansätze als auch operative Eingriffe umfassen. Dr. Harris behandelt eine Vielzahl von Erkrankungen wie Arthritis, Bandscheibenvorfälle, Knochenbrüche und Sportverletzungen. Durch moderne diagnostische Verfahren und präzise therapeutische Maßnahmen sorgt er dafür, dass Patienten eine schnelle und vollständige Genesung erfahren. Zusätzlich legt er großen Wert auf die Prävention von orthopädischen Problemen und berät seine Patienten zu ergonomischen Praktiken, Sport und Übungen, die die Muskulatur stärken und Verletzungen vorbeugen. Mit einem empathischen Ansatz begleitet er seine Patienten während des gesamten Heilungsprozesses und stellt sicher, dass sie zu einer besseren Lebensqualität zurückkehren.",
                            DoctorId = "c6ad3b43-cbba-49fe-8257-996ce2b72cd9",
                            ExperienceYear = 20,
                            Img = "https://www.teleclinic.com/wp-content/uploads/teleclinic-hero-slider-1-image-6.webp",
                            Score = 10.0,
                            Sector = "Orthopäde"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dr. Smith konzentriert sich auf die Hautpflege und hilft Patienten bei einer Vielzahl von Hauterkrankungen, darunter Akne, Ekzeme und Psoriasis. Mit ihrer langjährigen Erfahrung in der Dermatologie bietet sie sowohl medizinische Behandlungen als auch ästhetische Lösungen an, um das Hautbild ihrer Patienten zu verbessern. Sie verwendet modernste Technologien und Verfahren, um Hautkrankheiten effektiv zu behandeln und das Wohlbefinden ihrer Patienten zu steigern. Dr. Clarke legt großen Wert auf eine individuelle Beratung und maßgeschneiderte Behandlungskonzepte, die den spezifischen Bedürfnissen jedes Patienten gerecht werden. Sie setzt sich zudem für die Prävention von Hautkrebs ein und bietet regelmäßige Hautscreenings zur frühzeitigen Erkennung von Hautveränderungen an. Mit ihrer empathischen und professionellen Art sorgt Dr. Clarke dafür, dass ihre Patienten nicht nur medizinische Hilfe erhalten, sondern sich auch in ihrer Haut wieder wohlfühlen.",
                            DoctorId = "90798a5b-115f-4a1e-83ad-d112e6d66649",
                            ExperienceYear = 9,
                            Img = "https://www.collinsdictionary.com/images/full/doctor_117169531.jpg",
                            Score = 9.4399999999999995,
                            Sector = "Dermatologin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dr. Johnsonoy ist spezialisiert auf die Behandlung von Kindern und sorgt für deren gesundes Wachstum und Entwicklung. Sie ist bekannt für ihre einfühlsame Betreuung und ihre Fähigkeit, eine vertrauensvolle Verbindung zu jungen Patienten und ihren Familien aufzubauen. Ihr Schwerpunkt liegt auf der Prävention von Krankheiten sowie der Diagnose und Behandlung von kindlichen Gesundheitsproblemen, um eine optimale Entwicklung zu fördern. Dr. Roy setzt sich dafür ein, dass jedes Kind die beste medizinische Versorgung erhält, mit besonderem Augenmerk auf deren emotionales Wohlbefinden während der Behandlung. Sie arbeitet eng mit den Eltern zusammen, um individuelle Gesundheitspläne zu erstellen, die auf die Bedürfnisse jedes einzelnen Kindes abgestimmt sind.",
                            DoctorId = "5d2f81d6-a71c-4e40-9c62-896c856563ca",
                            ExperienceYear = 5,
                            Img = "https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-ios7-arrow-right-128.png",
                            Score = 9.9000000000000004,
                            Sector = "Pädiaterin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dr. Garcia ist ein führender Kardiologe mit umfassender Erfahrung in der Diagnose und Behandlung von Herzkrankheiten. Er hat sich auf die Behandlung von Herzinsuffizienz, koronaren Herzkrankheiten, Bluthochdruck und anderen kardiovaskulären Erkrankungen spezialisiert. Dr. Smith nutzt modernste diagnostische Verfahren wie EKG, Herzultraschall und Belastungstests, um eine präzise Diagnose zu stellen. Er legt großen Wert auf eine ganzheitliche Betreuung seiner Patienten, indem er individuelle Therapiepläne erstellt, die sowohl medikamentöse Behandlungen als auch Änderungen des Lebensstils umfassen. Darüber hinaus engagiert sich Dr. Smith aktiv in der Prävention von Herzkrankheiten und bietet seinen Patienten wertvolle Informationen zur gesunden Ernährung, regelmäßiger Bewegung und Stressbewältigung. Durch seine Expertise und einfühlsame Art hilft er seinen Patienten, ihre Lebensqualität zu verbessern und ihre Herzgesundheit langfristig zu erhalten.",
                            DoctorId = "0f0bd57b-fc8a-4f5a-aa0d-843fc6c71a4e",
                            ExperienceYear = 17,
                            Img = "https://media.istockphoto.com/id/177373093/photo/indian-male-entity.jpg?s=612x612&w=0&k=20&c=5FkfKdCYERkAg65cQtdqeO_D0JMv6vrEdPw3mX1Lkfg=",
                            Score = 9.3000000000000007,
                            Sector = "Kardiologe"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "DateStart");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "c6ad3b43-cbba-49fe-8257-996ce2b72cd9",
                            PatientId = "c7cce750-5ee7-4870-bf90-846bf41b3aef",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "90798a5b-115f-4a1e-83ad-d112e6d66649",
                            PatientId = "1877a624-8774-4c5d-bc6a-e0bfa775b8d6",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "5d2f81d6-a71c-4e40-9c62-896c856563ca",
                            PatientId = "1212dc61-07b2-4851-8d12-1d6247bd7ccc",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "0f0bd57b-fc8a-4f5a-aa0d-843fc6c71a4e",
                            PatientId = "988eef55-3693-4eaf-8fa2-3a0a944d33e0",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "c6ad3b43-cbba-49fe-8257-996ce2b72cd9",
                            PatientId = "af372561-1f84-479c-b380-d740906c1014",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "90798a5b-115f-4a1e-83ad-d112e6d66649",
                            PatientId = "f86df732-0766-4e52-ad7f-99f7bcb9005b",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "5d2f81d6-a71c-4e40-9c62-896c856563ca",
                            PatientId = "31f662be-cac9-400c-b735-be84b0d0a73d",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "0f0bd57b-fc8a-4f5a-aa0d-843fc6c71a4e",
                            PatientId = "04901d21-9108-446b-a62e-b129718175e9",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Roentgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hoertest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauss",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Koetzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwoehr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7dcb4756-752a-4b6f-bc86-92dc5c3db5d6",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c6ad3b43-cbba-49fe-8257-996ce2b72cd9",
                            RoleId = "7dcb4756-752a-4b6f-bc86-92dc5c3db5d6"
                        },
                        new
                        {
                            UserId = "90798a5b-115f-4a1e-83ad-d112e6d66649",
                            RoleId = "7dcb4756-752a-4b6f-bc86-92dc5c3db5d6"
                        },
                        new
                        {
                            UserId = "5d2f81d6-a71c-4e40-9c62-896c856563ca",
                            RoleId = "7dcb4756-752a-4b6f-bc86-92dc5c3db5d6"
                        },
                        new
                        {
                            UserId = "0f0bd57b-fc8a-4f5a-aa0d-843fc6c71a4e",
                            RoleId = "7dcb4756-752a-4b6f-bc86-92dc5c3db5d6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "c6ad3b43-cbba-49fe-8257-996ce2b72cd9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff2b6b67-c713-4e37-b74d-1f0c5f4fd994",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELvj0a9z7wTcY2+0cIOnVxQPlw4Vdyth3ali5cnep4NPnSJHeOGtkla2dUtoKcIS7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5587496-44e2-4a93-94a5-36b0da3f3563",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Doe",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "90798a5b-115f-4a1e-83ad-d112e6d66649",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "158d16a7-bcb0-4e43-91a2-b4f176ada0ac",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECnVUhSaZYbUNRrTJtv5Mcg2k0WZy07nc9EJUwWiFhISs3sqz1fCPhEIw/fkJB0EnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8c47c7-c686-42c4-9478-3ab94c54a516",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "5d2f81d6-a71c-4e40-9c62-896c856563ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acc5c3d6-a77b-4d1a-918c-dad4dc038b74",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEeSSCRDgCSxvkQB83bwuzNBTY1Wemnda+I2Dj52gLOTOFqsdMoRd6IE7vfB8RVdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e958806-6f9d-4f00-af38-8a595491d34c",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "0f0bd57b-fc8a-4f5a-aa0d-843fc6c71a4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05adde8c-8cfd-48ab-abbf-fc9069465c76",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiHNY5pmSe9qwsUz5m+Og1GZc1DR5EbMDzGmCixy7wIqzN1uMnQm0oLy6S3vSXwkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "912b3a3a-f437-49cc-8cc4-2e2f0710a8a7",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Brown",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "c7cce750-5ee7-4870-bf90-846bf41b3aef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1173b43c-d800-4d86-9cf7-e3eddaf168b8",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAECDdYg9WhFdb+jQdyWCRXBctIhurPH1yXAzv+tXUg4/X0ATGw6KZW9R6ghS7KpabNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8896c47-62dc-457a-bc04-0648dcecdaa4",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith",
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            Street = "Main Street 1",
                            TownId = 1
                        },
                        new
                        {
                            Id = "1877a624-8774-4c5d-bc6a-e0bfa775b8d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a43392b8-a503-4c38-a54a-6be6de73c1aa",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6KPNNCBzg25fbK3OsBaj5SFPg/3aDKzdJOZTfX9WovaG+bgzWHEwrBrSvpl+s+gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e44c6e23-ad12-4461-b2a2-e8bc8f8dcae6",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson",
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            Street = "Second Avenue 34",
                            TownId = 2
                        },
                        new
                        {
                            Id = "1212dc61-07b2-4851-8d12-1d6247bd7ccc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f0ffc8-85d4-4c97-a047-058c63f1e57a",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPqwzQZKpi6pgytsxsP3hi0C5A/34Pah0vWDd1JWDq2N04cthJ8Pk8mtrvx66TPZAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc5ef741-37f1-43dd-a014-0112f47e203b",
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams",
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            Street = "Third Lane 5",
                            TownId = 3
                        },
                        new
                        {
                            Id = "988eef55-3693-4eaf-8fa2-3a0a944d33e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e08edf4-a2a6-486c-9fe6-ff29cd4f8fdb",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHEidiglTubbA4P0p/ojNs5oc9d+ypkEV5RiQNDrmbubK6wWIjcpka/NGwqvv5eyZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08ffc028-cfa2-49cd-aedd-598fb81f1124",
                            TwoFactorEnabled = false,
                            UserName = "david.brown",
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            Street = "Fourth Street 78",
                            TownId = 4
                        },
                        new
                        {
                            Id = "54259b15-9c38-4039-8e3c-f7e07729e0ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc8d0c4c-ce56-4674-985e-9037089d00ad",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAENHctRton8oFkKILtq2VH6AUx6/OAQYpGIj75lukdGoiiDHbFc8Ljse5n+XBTo/gfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90a68308-7f80-4c61-9df7-787b1f553e4b",
                            TwoFactorEnabled = false,
                            UserName = "ella.jones",
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            Street = "Fifth Avenue 9",
                            TownId = 5
                        },
                        new
                        {
                            Id = "af372561-1f84-479c-b380-d740906c1014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa0e998f-fba3-4847-8cae-b32d6cd8a355",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkz4V4K94quJAzrGNvadO7CLE+/U+fzPBAGDL/w9eCpYm/9YYlP01pWWboLNHVzrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bb5dcc8-b84a-4f18-b5fa-0d7e9f622fe5",
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia",
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            Street = "Sixth Road 23",
                            TownId = 6
                        },
                        new
                        {
                            Id = "f86df732-0766-4e52-ad7f-99f7bcb9005b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5dd9160-c55f-4875-b0da-c109005823a7",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPByo/ujmBwLdemDEMGgaXVtRVHnYTpk6zI7PW8umlZBZRe6uNYMh+f9UFHSYSR7pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a017cbf6-7cd0-4bbe-b024-fd666d81e136",
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez",
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            Street = "Seventh Street 11",
                            TownId = 7
                        },
                        new
                        {
                            Id = "31f662be-cac9-400c-b735-be84b0d0a73d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1b3ae0f-e437-4bd1-9fb7-005b400bf431",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8sbJteFq1Hi1FQXrT3hxCgL/KSH8ocoVWc+x6RJRpm06yTebEPI0OgA9XpW3Aenw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da8466e2-821e-4f13-877e-96d90a2a9cdd",
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez",
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            Street = "Eighth Avenue 56",
                            TownId = 8
                        },
                        new
                        {
                            Id = "04901d21-9108-446b-a62e-b129718175e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47fa3050-1a54-441b-b227-7588c290ff86",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHvUU3VfnSeXq0raVOPrhW07DfS9enO848C6FXfd7E7wRPy7GZQUevYFyD8kStanmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7431a4c0-6c37-44ce-adda-acc0289ad788",
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee",
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            Street = "Ninth Street 67",
                            TownId = 9
                        },
                        new
                        {
                            Id = "948d4c9e-4187-4127-9423-a4294f51d9f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f6aa613-de60-42c4-a553-723d1a5be958",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOH6CvB1aMGBdffI277Eda5p6d+lK2tnPAap+eaCYKdHxLMQry1uPFRKWJb6TjmTIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a75731a-cd90-405a-98e3-61209d9eedec",
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez",
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            Street = "Tenth Boulevard 89",
                            TownId = 10
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfoPage", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
