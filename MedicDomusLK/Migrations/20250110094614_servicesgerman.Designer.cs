// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110094614_servicesgerman")]
    partial class servicesgerman
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "Date");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "96978a57-0fb6-4b41-b27c-52c8520953ef",
                            PatientId = "5d677e2b-3248-4911-8177-b1f6054050ae",
                            ServiceId = 1,
                            Date = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "b1da66cd-8bbc-4b2e-87be-acc13ab00fb0",
                            PatientId = "d3b34728-f7a1-4c9d-bfa7-7eb6ba3a15e1",
                            ServiceId = 2,
                            Date = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "23af7e15-f296-44e8-82fa-017f78dfca7c",
                            PatientId = "9e3de4a1-3248-4254-859d-ad1b709f5460",
                            ServiceId = 3,
                            Date = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "48f623ae-3e82-44d8-8dc5-1c89b1901009",
                            PatientId = "1d7bcb47-7b1c-475a-9424-8e8d814fe15b",
                            ServiceId = 4,
                            Date = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "a2dab488-98db-4988-a381-3a7a4c41dbb2",
                            PatientId = "eacd75aa-a911-486b-9516-019486fdcffd",
                            ServiceId = 5,
                            Date = new DateTime(2025, 1, 14, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "96978a57-0fb6-4b41-b27c-52c8520953ef",
                            PatientId = "b4ac5b92-0190-4998-8fe9-3cbe434056b2",
                            ServiceId = 1,
                            Date = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "b1da66cd-8bbc-4b2e-87be-acc13ab00fb0",
                            PatientId = "4050126e-9593-4fa9-922b-2f10504879b6",
                            ServiceId = 2,
                            Date = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "23af7e15-f296-44e8-82fa-017f78dfca7c",
                            PatientId = "970d5551-7706-4054-92f3-7df5ae0b718b",
                            ServiceId = 3,
                            Date = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "48f623ae-3e82-44d8-8dc5-1c89b1901009",
                            PatientId = "8e455d2a-f8c2-4fe9-9d09-2109cd378dd2",
                            ServiceId = 4,
                            Date = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "a2dab488-98db-4988-a381-3a7a4c41dbb2",
                            PatientId = "8754c483-cab7-4e62-a9ed-88f7aad95022",
                            ServiceId = 5,
                            Date = new DateTime(2025, 1, 19, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Röntgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hörtest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauß",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Kötzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwöhr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ace44016-76e9-477b-86ba-b5fe840208da",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "96978a57-0fb6-4b41-b27c-52c8520953ef",
                            RoleId = "ace44016-76e9-477b-86ba-b5fe840208da"
                        },
                        new
                        {
                            UserId = "b1da66cd-8bbc-4b2e-87be-acc13ab00fb0",
                            RoleId = "ace44016-76e9-477b-86ba-b5fe840208da"
                        },
                        new
                        {
                            UserId = "23af7e15-f296-44e8-82fa-017f78dfca7c",
                            RoleId = "ace44016-76e9-477b-86ba-b5fe840208da"
                        },
                        new
                        {
                            UserId = "48f623ae-3e82-44d8-8dc5-1c89b1901009",
                            RoleId = "ace44016-76e9-477b-86ba-b5fe840208da"
                        },
                        new
                        {
                            UserId = "a2dab488-98db-4988-a381-3a7a4c41dbb2",
                            RoleId = "ace44016-76e9-477b-86ba-b5fe840208da"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "96978a57-0fb6-4b41-b27c-52c8520953ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a9c7fc9-1b63-4d74-8079-11e6bf0059e7",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEONEoBKm0wmpFS92d6Mv0Fq7Ui1ZIvYOFmkDc+L7SGxltIwuIJxsQvDieueIkNIv9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3c2d10c-a3c1-4016-9c40-86f6973c2af3",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Doe",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "b1da66cd-8bbc-4b2e-87be-acc13ab00fb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b496df-b6a6-4d6d-8367-0a76c2feccf9",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNScJXyCTWlv63N8gcDEPW+gE8w8DXV58UUQZZVqlSCzp07XygsG4hWm4grTJR3BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2464a707-b4f5-44e7-b8fd-f05b2b26b2f7",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "23af7e15-f296-44e8-82fa-017f78dfca7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e088ce7d-0f3e-4535-9d0a-cb14192254a9",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBTZb/xSSyeCietP3YPTyvyCDlX7KPiD/6VTJZeyoGT4KSqkMPg0wkxiaphVpvMdKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b83848ce-adeb-4d60-ba16-fd493200243d",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "48f623ae-3e82-44d8-8dc5-1c89b1901009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c006527-296a-4900-afaf-6637d61e8248",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4JIHd0Wcsqn1ppvugHQPN61jvnX8xl2e0FEOWMtiymNvCpNiIHA9GUnryRONTtIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "272defc6-bfec-4417-8c52-b00d08301ad4",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Brown",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "a2dab488-98db-4988-a381-3a7a4c41dbb2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45f51450-b567-4cb8-8001-8b9bd2b9b519",
                            Email = "doctor5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR5@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMFjnaHS0jdRCr4SR+Am9RMKwP0CHCXujtxsVzG+SIRo4+4ASVAlfTFHoDZ1dPf3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aa2459a-3159-4f12-8ee2-f0c5e15ccb56",
                            TwoFactorEnabled = false,
                            UserName = "doctor5@example.com",
                            Birthdate = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sarah",
                            Lastname = "Davis",
                            Street = "654 Birch Blvd",
                            TownId = 5
                        },
                        new
                        {
                            Id = "5d677e2b-3248-4911-8177-b1f6054050ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c7d65c4-1a00-4eeb-9d5d-93c06d19ad8f",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAECZBnVrXXCgJkdVTyKgv3KuuBRNsbujCSJoPQIL6yTOnFzcb36m+m+X8GkeBe59rqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01f11343-9569-4173-875b-c24003acb0b7",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith",
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            Street = "Main Street 1",
                            TownId = 1
                        },
                        new
                        {
                            Id = "d3b34728-f7a1-4c9d-bfa7-7eb6ba3a15e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d38a8c2-1b65-4f6a-8610-49cf4db1e5a8",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAENfCaijsj4/vshXL1o9tzjrSgyk0p1J8R7w/vSJqHXd1aOYtzO39OVIESsqMNuReig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5582aedd-e0c6-4ee8-99e0-1f965c8bf73c",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson",
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            Street = "Second Avenue 34",
                            TownId = 2
                        },
                        new
                        {
                            Id = "9e3de4a1-3248-4254-859d-ad1b709f5460",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec1694bf-6a88-4c72-9223-f0b9499c0ab0",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEL4QgmZs4QFto9DrfSZ2D4B5hHeYuwJZ2Xg5hm61ymVpf5cM5oFxs/D/9IMXGRUYmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5759917-ceb3-4525-a6dd-030e3eb9af2d",
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams",
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            Street = "Third Lane 5",
                            TownId = 3
                        },
                        new
                        {
                            Id = "1d7bcb47-7b1c-475a-9424-8e8d814fe15b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e90148b2-c674-41af-b0ae-df1100746648",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAELOLp38XaJ5WvqCWnsPbCZoAzpTCU3apbBOujj89E+fVV/uc6Eg0BUehXmU92TsjGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6c84ab9-7f72-4fe2-826a-2351e805b4f1",
                            TwoFactorEnabled = false,
                            UserName = "david.brown",
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            Street = "Fourth Street 78",
                            TownId = 4
                        },
                        new
                        {
                            Id = "eacd75aa-a911-486b-9516-019486fdcffd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6693962-6a3f-456b-b383-bd7e6c9d9643",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEORIpnyvWWi1UH5Kom1XCX4E34Z9P+lYGEhvWmleIS503FlHbghSGs1LFPSkmw8N+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30a311fa-1246-4a6a-b4ec-4ea9ba5a3591",
                            TwoFactorEnabled = false,
                            UserName = "ella.jones",
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            Street = "Fifth Avenue 9",
                            TownId = 5
                        },
                        new
                        {
                            Id = "b4ac5b92-0190-4998-8fe9-3cbe434056b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6bd1860-dbed-43c0-9fa1-bc86f9e6d9b0",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEWbyE32tDOSnQH5pWe3t8LnKspxPHJVEpchfiyBdZ3HIOoHqz384Fjx/dC3ehtrrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97659939-17d3-4e02-9955-bb8775374b74",
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia",
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            Street = "Sixth Road 23",
                            TownId = 6
                        },
                        new
                        {
                            Id = "4050126e-9593-4fa9-922b-2f10504879b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "091f7119-769b-49f2-943a-80cb06bc19fb",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEbJOxO7O/A1o6DY0CYM2VnWddXvN7JnuaSEDnSI88TQVy3Mw/6dBtJHQFGs2mL51w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5bbdc90-1a97-4c3e-85cb-1bc03374a458",
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez",
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            Street = "Seventh Street 11",
                            TownId = 7
                        },
                        new
                        {
                            Id = "970d5551-7706-4054-92f3-7df5ae0b718b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc3377fd-c140-422b-b18f-2c16b0489f49",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH00BCNIlQ/+U0YptNkuYbFqfIwJKdGSC/N2sMI4IDWGfBFFmseJ6tMjvD1qnOFT7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e450d40c-c5d9-4aeb-bb3e-95ca201ac00e",
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez",
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            Street = "Eighth Avenue 56",
                            TownId = 8
                        },
                        new
                        {
                            Id = "8e455d2a-f8c2-4fe9-9d09-2109cd378dd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be32ead3-0747-4194-8702-25f85846a89d",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDx1PnQD00tbSlo3mdpateH6voaucnIvaUi00qw05piDuiydLErEHYwvhFZF6PT8+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "134d59f9-3949-4ddd-90b9-abe0f02a2a51",
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee",
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            Street = "Ninth Street 67",
                            TownId = 9
                        },
                        new
                        {
                            Id = "8754c483-cab7-4e62-a9ed-88f7aad95022",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92d5a2a4-e041-4a7d-b312-b6f58d05f973",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbPQJAOEE3aXe97b/Qv5XF26M45fcVg4Oxfd45SzGL8W4G4xptCC9j/WtPdwc8TMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6e111a1-ada6-4ecb-addc-11f6f20dda1c",
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez",
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            Street = "Tenth Boulevard 89",
                            TownId = 10
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
