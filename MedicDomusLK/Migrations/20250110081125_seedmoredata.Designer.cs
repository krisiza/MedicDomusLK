// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110081125_seedmoredata")]
    partial class seedmoredata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "Date");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "bf2102b7-1c55-4ae6-a977-bf8a9626333a",
                            PatientId = "5e25a06c-94d3-446e-8cdc-a43409d1959e",
                            ServiceId = 1,
                            Date = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "a3249c05-0e59-412f-8917-26770d850728",
                            PatientId = "52b8e3a8-ee7b-41e8-934e-4f1239d7ae6c",
                            ServiceId = 2,
                            Date = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "504c559f-88d6-4ea3-8ff1-abad069f42e4",
                            PatientId = "c85b1ad1-ba3e-436c-93cc-0b0d430ce18c",
                            ServiceId = 3,
                            Date = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "cab6d27a-1fba-45a6-9e92-f151fb97453e",
                            PatientId = "6bc325f1-b0bf-4372-a913-53b4908dec39",
                            ServiceId = 4,
                            Date = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "f0e9583b-49ce-49ce-bb8d-a009d6f4519f",
                            PatientId = "c753620d-c230-4db2-a07c-43c162e23016",
                            ServiceId = 5,
                            Date = new DateTime(2025, 1, 14, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "bf2102b7-1c55-4ae6-a977-bf8a9626333a",
                            PatientId = "0b890ef6-8874-4cd2-8b33-8b6f9e4a8db3",
                            ServiceId = 1,
                            Date = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "a3249c05-0e59-412f-8917-26770d850728",
                            PatientId = "9ecdeeb6-f820-4db6-8758-d9af8fef213e",
                            ServiceId = 2,
                            Date = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "504c559f-88d6-4ea3-8ff1-abad069f42e4",
                            PatientId = "66fb32e6-d95a-4a79-a247-053212b2373b",
                            ServiceId = 3,
                            Date = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "cab6d27a-1fba-45a6-9e92-f151fb97453e",
                            PatientId = "65c70f8b-3d45-4d3d-b700-28aaf53b0827",
                            ServiceId = 4,
                            Date = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "f0e9583b-49ce-49ce-bb8d-a009d6f4519f",
                            PatientId = "ae680932-d02c-42cc-a2f3-ed5619892bb7",
                            ServiceId = 5,
                            Date = new DateTime(2025, 1, 19, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Consultation",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pediatric Check-Up",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vaccination",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blood Test",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physical Therapy Session",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Specialist Consultation",
                            Price = 100.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauß",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Kötzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwöhr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "396617d6-7b1a-4e60-a7cc-7edea3568fea",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf2102b7-1c55-4ae6-a977-bf8a9626333a",
                            RoleId = "396617d6-7b1a-4e60-a7cc-7edea3568fea"
                        },
                        new
                        {
                            UserId = "a3249c05-0e59-412f-8917-26770d850728",
                            RoleId = "396617d6-7b1a-4e60-a7cc-7edea3568fea"
                        },
                        new
                        {
                            UserId = "504c559f-88d6-4ea3-8ff1-abad069f42e4",
                            RoleId = "396617d6-7b1a-4e60-a7cc-7edea3568fea"
                        },
                        new
                        {
                            UserId = "cab6d27a-1fba-45a6-9e92-f151fb97453e",
                            RoleId = "396617d6-7b1a-4e60-a7cc-7edea3568fea"
                        },
                        new
                        {
                            UserId = "f0e9583b-49ce-49ce-bb8d-a009d6f4519f",
                            RoleId = "396617d6-7b1a-4e60-a7cc-7edea3568fea"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "bf2102b7-1c55-4ae6-a977-bf8a9626333a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8285df37-e5fd-4135-9e93-0cb1deee2d59",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKi8j62XhommgDTGk9LF73DZ1DUwzXqI4r8zUBuvmc6mag/N6GrtoEb13W8O2COfAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdcc8f8c-8ecf-4716-bb41-3b34bc0c4939",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Doe",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "a3249c05-0e59-412f-8917-26770d850728",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "689064ce-7469-4e05-a047-6682198408f0",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBvHzB9U5Up3QUTW2xsPPaa2owda2D+K1e8XsVk7ar+0HWAW1YxFHKamvEpeqG9rQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aff9bdad-dcfe-43e6-a2f8-114f4bad65c5",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "504c559f-88d6-4ea3-8ff1-abad069f42e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b942e4-1fbf-4bf5-a3da-86edcca4b7dc",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAzLjFiowdgE74voCIbfAMaSON3d4OkE5Cw+GiNpi8XprYn4ym1CNzLrN0vNT5GZig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4b44907-bec3-49c6-9c31-313a7d88e799",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "cab6d27a-1fba-45a6-9e92-f151fb97453e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "583d899b-97a8-448e-b3c0-ad87bc16ae20",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoUxDzb/KOI7+eed8gYaiFBK7b0Op4vAAFOJbQU3i24duF6/6ujcxhHYK50RELTUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62fb4743-c26b-465e-ad7c-d8c7963dc69c",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Brown",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "f0e9583b-49ce-49ce-bb8d-a009d6f4519f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc2f3ce3-4c00-418c-897b-c712b8fe17e8",
                            Email = "doctor5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR5@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENjlTpz4kLWbraFboqZxGk3EWSSs25wtd4xMXG0J3LaOhWn0LS0aIQ8J7WMEijnxgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9a8fd9e-37a6-4d48-9f2f-d8a52c34fae6",
                            TwoFactorEnabled = false,
                            UserName = "doctor5@example.com",
                            Birthdate = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sarah",
                            Lastname = "Davis",
                            Street = "654 Birch Blvd",
                            TownId = 5
                        },
                        new
                        {
                            Id = "5e25a06c-94d3-446e-8cdc-a43409d1959e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "434e400c-f808-4813-b947-2989ab9000b8",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFs/+IpMl2zxaq3h1bN1V3+fXwotvpyBwrOmUTftR6I0UL6R4a/s9ecryzYMuIqHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fd8724c-ff22-4815-b58b-8640adb8d134",
                            TwoFactorEnabled = false,
                            UserName = "alice.smith",
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            Street = "Main Street 1",
                            TownId = 1
                        },
                        new
                        {
                            Id = "52b8e3a8-ee7b-41e8-934e-4f1239d7ae6c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dc5ff28-6726-4e38-a44c-315be57a0de6",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAENFxaX266MGHpg6iWSIGS1FdzHxx4QdYxnq2qsWeOreGKc7I5UqCOPY1FVB/M4Lw4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "603816dd-c4db-44e8-8efb-87e678e2ac7e",
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson",
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            Street = "Second Avenue 34",
                            TownId = 2
                        },
                        new
                        {
                            Id = "c85b1ad1-ba3e-436c-93cc-0b0d430ce18c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3dc393e-81a0-4992-ad02-24db4c3265af",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEOnYnbWm9dQQQbdJwMfnzdBPX2J92L98xd/eVaH1n02hT6uuCo6rgVItJFmjs2bdyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5042cb0-4494-4e63-ab1f-ee8c32e897f0",
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams",
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            Street = "Third Lane 5",
                            TownId = 3
                        },
                        new
                        {
                            Id = "6bc325f1-b0bf-4372-a913-53b4908dec39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e63d7afc-0f70-40d0-8aef-c20e4948e32c",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMq/fMqhtrAZN+fxKVqmUrMcwV0W/Sx0/JxvMBmvZOS6R/S4gQhs8ZGntIoWrjzgCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54811621-3afb-49bb-8c90-b358fefa3a03",
                            TwoFactorEnabled = false,
                            UserName = "david.brown",
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            Street = "Fourth Street 78",
                            TownId = 4
                        },
                        new
                        {
                            Id = "c753620d-c230-4db2-a07c-43c162e23016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "569fc982-d67d-47e4-8b41-284c52f428ee",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEMt0TU7oVffMxxpbvSLMpoiCkAVkjKHx1S09nKToqn7V8cJv0XQ41kZOw7vJfJrk5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ce341be-110f-4ee1-96ef-fe0d1f2e1991",
                            TwoFactorEnabled = false,
                            UserName = "ella.jones",
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            Street = "Fifth Avenue 9",
                            TownId = 5
                        },
                        new
                        {
                            Id = "0b890ef6-8874-4cd2-8b33-8b6f9e4a8db3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f63215-a8a7-401f-b185-8b31f2c86616",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiO7u40pxCpYFGDNTrWPPWFArRZJAkmFyzzWUgtdM2VldU+CZjXn2C3c+DoToeykQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3967c3-3fa7-4ccc-85e9-d8cd96aa3735",
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia",
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            Street = "Sixth Road 23",
                            TownId = 6
                        },
                        new
                        {
                            Id = "9ecdeeb6-f820-4db6-8758-d9af8fef213e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a50d510c-32f4-4326-9c05-995893f1a6c1",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOr0M/owerK6V8HQw1gl/DDvhsgzC+oLQ0PQw5oLyJSbRnWLxdSeARchH0p1LVmYrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a769ee4-796d-40bc-bd0f-35427f206fef",
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez",
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            Street = "Seventh Street 11",
                            TownId = 7
                        },
                        new
                        {
                            Id = "66fb32e6-d95a-4a79-a247-053212b2373b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23b7e87d-6cdf-4355-8ab8-b774ad9137a9",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZDeLM3bXq/OEksM7PWPLF5d6HIYN9npujLP4mHD4vVyeYDjLIgw/zIuUhqW226hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fae7e2df-d0b4-404d-a421-1cacd170f8f7",
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez",
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            Street = "Eighth Avenue 56",
                            TownId = 8
                        },
                        new
                        {
                            Id = "65c70f8b-3d45-4d3d-b700-28aaf53b0827",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebeec2be-4ad5-4c28-9e7b-f3b739e305ca",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdJmnQGLN9aew/dPKJBpmGiCJrv6gny4yfskc3tch64LvHEWMwqdNMoOSY0vHhaFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19e4484e-2515-48a1-9c28-52e9c5ed91bd",
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee",
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            Street = "Ninth Street 67",
                            TownId = 9
                        },
                        new
                        {
                            Id = "ae680932-d02c-42cc-a2f3-ed5619892bb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5239928-2a81-48e6-a82d-ee939dbd978d",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENjdqsBZYOJdoJ3kk3JSEw4mvCZKDmNaqLNW2SYIt2KVchcmUZy2fhCE1iHsdAotNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f50b83dd-ea5f-4a50-a649-ad4e0c9e737f",
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez",
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            Street = "Tenth Boulevard 89",
                            TownId = 10
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
