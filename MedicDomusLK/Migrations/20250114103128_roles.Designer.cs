// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114103128_roles")]
    partial class roles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f22b29b7-7fe9-409f-97a3-0d3fa57b3aef",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b7ce18-41f2-4dd5-b2d3-25a8ae612452",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            Firstname = "John",
                            Lastname = "Harris",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBSqkzeZIJqaiCXX5/NBAjB8IhDFwgZA9dcI+WgAutShM728vrS+yF4xOnT8bhRXGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9eb3b20b-d062-4e33-855f-51ea074179e1",
                            Street = "123 Elm Street",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com"
                        },
                        new
                        {
                            Id = "fa149267-cf02-4778-8839-05aa0172d2da",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e138f631-32af-4bb7-8ccd-7eb7f1710c97",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            Firstname = "Jane",
                            Lastname = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDpexbTAV2pI3qI/pM5SSA5Hu6ccYKUwHexrt776bnghvqU5N0kkUn1tsfmnrnfqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b15788c8-3afe-485d-9294-cf0dc0b6bb6e",
                            Street = "456 Oak Avenue",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com"
                        },
                        new
                        {
                            Id = "62af87ff-64be-42a0-90c0-4d0c6b343133",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a03c2452-4af3-4636-a034-c0236f1d1a62",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFXVZWxJA27ixggz7Jfkrs75Qi+jZ10tNG+dF4l5jgjQgXP5qdp/6prpp6Cp0f8y7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c95b4a65-2291-4008-9625-6f8dd842092e",
                            Street = "789 Pine Lane",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com"
                        },
                        new
                        {
                            Id = "ad0ab7de-6aac-441f-a0f7-7ee8d0243852",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f7fb09e7-9f57-42fa-9246-f0ddc396d202",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            Firstname = "Michael",
                            Lastname = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzIeGakXO4Q6/eL27GCCILZOJeB3JJOACVNKJQqueNVWFuYV5MDL+cx3SmKRfVYuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "273c8dea-0977-4357-ac62-9c3d1334a47f",
                            Street = "321 Maple Court",
                            TownId = 4,
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com"
                        },
                        new
                        {
                            Id = "8e637600-ce78-453a-b297-3ce0215328eb",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "42053e45-4ace-4044-9b9a-2bbd2a9b55de",
                            Email = "alice.smith@example.com",
                            EmailConfirmed = false,
                            Firstname = "Alice",
                            Gender = 0,
                            Lastname = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+8NKmWkZggzv4RCZ2BJge3iFqXsMKjx44iIqhYTPju5Go9Il/AyNlkWEstoPoySA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "680c5fbd-6e8c-4c1f-8ea6-1d7a7d2e7ccd",
                            Street = "Main Street 1",
                            TownId = 1,
                            TwoFactorEnabled = false,
                            UserName = "alice.smith"
                        },
                        new
                        {
                            Id = "c9e3cc49-cbaf-4623-9c1a-3ff56cd384fe",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3da68f9e-3d8c-42c4-b16c-776cc2011c2c",
                            Email = "bob.johnson@example.com",
                            EmailConfirmed = false,
                            Firstname = "Bob",
                            Gender = 1,
                            Lastname = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "BOB.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1gabYXAahviP5sOMJs5YSQbjSVFowfqTyH2kv28kph/TgZMwIW0HumDWpwAg3D/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5fb0a4e-c35b-4615-bdbe-ff52479a2b97",
                            Street = "Second Avenue 34",
                            TownId = 2,
                            TwoFactorEnabled = false,
                            UserName = "bob.johnson"
                        },
                        new
                        {
                            Id = "acd0a572-a26a-441c-abf9-d64be15fba36",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "61adb137-b20e-411d-87ce-9914294d2e48",
                            Email = "cathy.williams@example.com",
                            EmailConfirmed = false,
                            Firstname = "Cathy",
                            Gender = 0,
                            Lastname = "Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "CATHY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "CATHY.WILLIAMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEBIPmRLSW41TxsBqfNhT9+/g72R9YRMG11O+nDlmgS5FrgiA6fTu2o/09Ox/m2dkoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fe3194a-8070-4d68-a02e-739b1a353fac",
                            Street = "Third Lane 5",
                            TownId = 3,
                            TwoFactorEnabled = false,
                            UserName = "cathy.williams"
                        },
                        new
                        {
                            Id = "99cf6f56-0131-4ddc-85d1-8d007104691e",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1988, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c363ad93-c687-44e8-ba5d-2ed597411353",
                            Email = "david.brown@example.com",
                            EmailConfirmed = false,
                            Firstname = "David",
                            Gender = 1,
                            Lastname = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA/a6xUupTwM6etzdWUZGG3pixFH4aR1ZFFXXPk8g76A95Z9GmDs3YcID6dgvScyOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4457a6d3-1729-4b49-8d64-55e1276f165e",
                            Street = "Fourth Street 78",
                            TownId = 4,
                            TwoFactorEnabled = false,
                            UserName = "david.brown"
                        },
                        new
                        {
                            Id = "6a0e2302-56c8-42e5-a983-4a385c182454",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1995, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "45e3fb84-68c6-42c6-b781-213c3601943e",
                            Email = "ella.jones@example.com",
                            EmailConfirmed = false,
                            Firstname = "Ella",
                            Gender = 0,
                            Lastname = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLA.JONES@EXAMPLE.COM",
                            NormalizedUserName = "ELLA.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEHf2BIgZX7FYdaWQN81S67udzvR8RmNZrDA8tSTLOYgcDTyzyxt5+RY/pFs1V+jYwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd552382-26ba-4edf-9b73-5ef5f854559b",
                            Street = "Fifth Avenue 9",
                            TownId = 5,
                            TwoFactorEnabled = false,
                            UserName = "ella.jones"
                        },
                        new
                        {
                            Id = "ab691d2a-e728-43a8-8627-02112ee9c5c7",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0ab6db12-00a3-4e45-8aac-6fe8af9e55b4",
                            Email = "frank.garcia@example.com",
                            EmailConfirmed = false,
                            Firstname = "Frank",
                            Gender = 1,
                            Lastname = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK.GARCIA@EXAMPLE.COM",
                            NormalizedUserName = "FRANK.GARCIA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqGlMh5daURyJEg+UGVnFOuAGmBhYmg1FnO35KOwnZOBED0azAhIobbwNExPc8FdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05623898-828a-47dc-b7e8-76ecd8e63ec6",
                            Street = "Sixth Road 23",
                            TownId = 6,
                            TwoFactorEnabled = false,
                            UserName = "frank.garcia"
                        },
                        new
                        {
                            Id = "d964d4b4-474b-476b-933b-264f67f3f980",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7b45d951-853e-436c-a15d-0d7c287b91a8",
                            Email = "grace.martinez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Grace",
                            Gender = 0,
                            Lastname = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACE.MARTINEZ@EXAMPLE.COM",
                            NormalizedUserName = "GRACE.MARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAED0fpdMTCllYQJ+4EkkIMhtwjv/gNRXp6OxWv/JZqKnC+Ny2m+K66w+AeV4ybC7Y2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6488b26c-6d71-4878-b82e-de092d04870d",
                            Street = "Seventh Street 11",
                            TownId = 7,
                            TwoFactorEnabled = false,
                            UserName = "grace.martinez"
                        },
                        new
                        {
                            Id = "2999cdc6-0e29-474c-b4f7-41f18abb1f87",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1987, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d394420d-d172-490d-a3cc-ded9d3e01cfb",
                            Email = "henry.rodriguez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Henry",
                            Gender = 1,
                            Lastname = "Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY.RODRIGUEZ@EXAMPLE.COM",
                            NormalizedUserName = "HENRY.RODRIGUEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECuyLnN6kpXbnll64dQeOZD3Kys41rvhYqfuVXaNLNYBVlVUDFEG9Tn75VIhMuINXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "801b97f1-47e4-41ca-9bb8-d8664207e695",
                            Street = "Eighth Avenue 56",
                            TownId = 8,
                            TwoFactorEnabled = false,
                            UserName = "henry.rodriguez"
                        },
                        new
                        {
                            Id = "4844bf54-0f7e-4e06-b839-71600f7d8421",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1996, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9a30a126-be70-433d-b062-0c0208391a2c",
                            Email = "isabella.lee@example.com",
                            EmailConfirmed = false,
                            Firstname = "Isabella",
                            Gender = 0,
                            Lastname = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "ISABELLA.LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGgeJOJlgz6ZCjcx8WOYIm9Glalf1rHiyYKpceOtk2pOLtKm1UoNy2jvQdcLHM0UUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23252f40-e491-438f-97a5-dce0a383e08d",
                            Street = "Ninth Street 67",
                            TownId = 9,
                            TwoFactorEnabled = false,
                            UserName = "isabella.lee"
                        },
                        new
                        {
                            Id = "74eedd83-1545-4812-b088-8c04dc30502d",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1994, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d02ba84f-96e6-4e17-aaad-c6f359c2572a",
                            Email = "jack.hernandez@example.com",
                            EmailConfirmed = false,
                            Firstname = "Jack",
                            Gender = 1,
                            Lastname = "Hernandez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.HERNANDEZ@EXAMPLE.COM",
                            NormalizedUserName = "JACK.HERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFN7VkyPuuAyP4q2MFUH4ICFHesgQJkVeYwyeJ7z1s65Mr9OIFUa1WE8HhUzAynROw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81cb66c0-a0fb-422e-a7dd-64d06626d39f",
                            Street = "Tenth Boulevard 89",
                            TownId = 10,
                            TwoFactorEnabled = false,
                            UserName = "jack.hernandez"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dr. Harris ist spezialisiert auf die Behandlung von Erkrankungen der Knochen, Gelenke und Muskeln und hilft Patienten, sich von Verletzungen und Operationen zu erholen. Mit seiner Expertise in der Orthopädie und Rehabilitation bietet er maßgeschneiderte Behandlungspläne, die sowohl konservative Therapieansätze als auch operative Eingriffe umfassen. Dr. Harris behandelt eine Vielzahl von Erkrankungen wie Arthritis, Bandscheibenvorfälle, Knochenbrüche und Sportverletzungen. Durch moderne diagnostische Verfahren und präzise therapeutische Maßnahmen sorgt er dafür, dass Patienten eine schnelle und vollständige Genesung erfahren. Zusätzlich legt er großen Wert auf die Prävention von orthopädischen Problemen und berät seine Patienten zu ergonomischen Praktiken, Sport und Übungen, die die Muskulatur stärken und Verletzungen vorbeugen. Mit einem empathischen Ansatz begleitet er seine Patienten während des gesamten Heilungsprozesses und stellt sicher, dass sie zu einer besseren Lebensqualität zurückkehren.",
                            DoctorId = "f22b29b7-7fe9-409f-97a3-0d3fa57b3aef",
                            ExperienceYear = 20,
                            Img = "https://www.teleclinic.com/wp-content/uploads/teleclinic-hero-slider-1-image-6.webp",
                            Score = 10.0,
                            Sector = "Orthopäde"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dr. Smith konzentriert sich auf die Hautpflege und hilft Patienten bei einer Vielzahl von Hauterkrankungen, darunter Akne, Ekzeme und Psoriasis. Mit ihrer langjährigen Erfahrung in der Dermatologie bietet sie sowohl medizinische Behandlungen als auch ästhetische Lösungen an, um das Hautbild ihrer Patienten zu verbessern. Sie verwendet modernste Technologien und Verfahren, um Hautkrankheiten effektiv zu behandeln und das Wohlbefinden ihrer Patienten zu steigern. Dr. Clarke legt großen Wert auf eine individuelle Beratung und maßgeschneiderte Behandlungskonzepte, die den spezifischen Bedürfnissen jedes Patienten gerecht werden. Sie setzt sich zudem für die Prävention von Hautkrebs ein und bietet regelmäßige Hautscreenings zur frühzeitigen Erkennung von Hautveränderungen an. Mit ihrer empathischen und professionellen Art sorgt Dr. Clarke dafür, dass ihre Patienten nicht nur medizinische Hilfe erhalten, sondern sich auch in ihrer Haut wieder wohlfühlen.",
                            DoctorId = "fa149267-cf02-4778-8839-05aa0172d2da",
                            ExperienceYear = 9,
                            Img = "https://www.collinsdictionary.com/images/full/doctor_117169531.jpg",
                            Score = 9.4399999999999995,
                            Sector = "Dermatologin"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dr. Johnson ist spezialisiert auf die Behandlung von Kindern und sorgt für deren gesundes Wachstum und Entwicklung. Sie ist bekannt für ihre einfühlsame Betreuung und ihre Fähigkeit, eine vertrauensvolle Verbindung zu jungen Patienten und ihren Familien aufzubauen. Ihr Schwerpunkt liegt auf der Prävention von Krankheiten sowie der Diagnose und Behandlung von kindlichen Gesundheitsproblemen, um eine optimale Entwicklung zu fördern. Dr. Roy setzt sich dafür ein, dass jedes Kind die beste medizinische Versorgung erhält, mit besonderem Augenmerk auf deren emotionales Wohlbefinden während der Behandlung. Sie arbeitet eng mit den Eltern zusammen, um individuelle Gesundheitspläne zu erstellen, die auf die Bedürfnisse jedes einzelnen Kindes abgestimmt sind.",
                            DoctorId = "62af87ff-64be-42a0-90c0-4d0c6b343133",
                            ExperienceYear = 5,
                            Img = "https://img.freepik.com/fotos-kostenlos/schoene-junge-aerztin-die-kamera-im-buero-betrachtet_1301-7807.jpg",
                            Score = 9.9000000000000004,
                            Sector = "Pädiaterin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dr. Garcia ist ein führender Kardiologe mit umfassender Erfahrung in der Diagnose und Behandlung von Herzkrankheiten. Er hat sich auf die Behandlung von Herzinsuffizienz, koronaren Herzkrankheiten, Bluthochdruck und anderen kardiovaskulären Erkrankungen spezialisiert. Dr. Smith nutzt modernste diagnostische Verfahren wie EKG, Herzultraschall und Belastungstests, um eine präzise Diagnose zu stellen. Er legt großen Wert auf eine ganzheitliche Betreuung seiner Patienten, indem er individuelle Therapiepläne erstellt, die sowohl medikamentöse Behandlungen als auch Änderungen des Lebensstils umfassen. Darüber hinaus engagiert sich Dr. Smith aktiv in der Prävention von Herzkrankheiten und bietet seinen Patienten wertvolle Informationen zur gesunden Ernährung, regelmäßiger Bewegung und Stressbewältigung. Durch seine Expertise und einfühlsame Art hilft er seinen Patienten, ihre Lebensqualität zu verbessern und ihre Herzgesundheit langfristig zu erhalten.",
                            DoctorId = "ad0ab7de-6aac-441f-a0f7-7ee8d0243852",
                            ExperienceYear = 17,
                            Img = "https://media.istockphoto.com/id/177373093/photo/indian-male-doctor.jpg?s=612x612&w=0&k=20&c=5FkfKdCYERkAg65cQtdqeO_D0JMv6vrEdPw3mX1Lkfg=",
                            Score = 9.3000000000000007,
                            Sector = "Kardiologe"
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "DateStart");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");

                    b.HasData(
                        new
                        {
                            DoctorId = "f22b29b7-7fe9-409f-97a3-0d3fa57b3aef",
                            PatientId = "8e637600-ce78-453a-b297-3ce0215328eb",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 10, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "fa149267-cf02-4778-8839-05aa0172d2da",
                            PatientId = "c9e3cc49-cbaf-4623-9c1a-3ff56cd384fe",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 11, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "62af87ff-64be-42a0-90c0-4d0c6b343133",
                            PatientId = "acd0a572-a26a-441c-abf9-d64be15fba36",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 12, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "ad0ab7de-6aac-441f-a0f7-7ee8d0243852",
                            PatientId = "99cf6f56-0131-4ddc-85d1-8d007104691e",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 13, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "f22b29b7-7fe9-409f-97a3-0d3fa57b3aef",
                            PatientId = "ab691d2a-e728-43a8-8627-02112ee9c5c7",
                            ServiceId = 1,
                            DateStart = new DateTime(2025, 1, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "fa149267-cf02-4778-8839-05aa0172d2da",
                            PatientId = "d964d4b4-474b-476b-933b-264f67f3f980",
                            ServiceId = 2,
                            DateStart = new DateTime(2025, 1, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 16, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "62af87ff-64be-42a0-90c0-4d0c6b343133",
                            PatientId = "2999cdc6-0e29-474c-b4f7-41f18abb1f87",
                            ServiceId = 3,
                            DateStart = new DateTime(2025, 1, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 17, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = "ad0ab7de-6aac-441f-a0f7-7ee8d0243852",
                            PatientId = "4844bf54-0f7e-4e06-b839-71600f7d8421",
                            ServiceId = 4,
                            DateStart = new DateTime(2025, 1, 18, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateEnd = new DateTime(2025, 1, 18, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allgemeine Untersuchung",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kinderuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Impfung",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bluttest",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physiotherapiesitzung",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spezialistenberatung",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Roentgenuntersuchung",
                            Price = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "EKG",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ultraschalluntersuchung",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hoertest",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Krebsvorsorgeuntersuchung",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Schlafdiagnostik ",
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauss",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Koetzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwoehr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e680ff77-3de4-4f6c-a2f1-14bd467f13ac",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f22b29b7-7fe9-409f-97a3-0d3fa57b3aef",
                            RoleId = "e680ff77-3de4-4f6c-a2f1-14bd467f13ac"
                        },
                        new
                        {
                            UserId = "fa149267-cf02-4778-8839-05aa0172d2da",
                            RoleId = "e680ff77-3de4-4f6c-a2f1-14bd467f13ac"
                        },
                        new
                        {
                            UserId = "62af87ff-64be-42a0-90c0-4d0c6b343133",
                            RoleId = "e680ff77-3de4-4f6c-a2f1-14bd467f13ac"
                        },
                        new
                        {
                            UserId = "ad0ab7de-6aac-441f-a0f7-7ee8d0243852",
                            RoleId = "e680ff77-3de4-4f6c-a2f1-14bd467f13ac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorInfo", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
