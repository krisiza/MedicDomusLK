// <auto-generated />
using System;
using MedicDomusLK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicDomusLK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250108075802_doctorpatientservicesDate")]
    partial class doctorpatientservicesDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "PatientId", "ServiceId", "Date");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorPatientServices");
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Consultation",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pediatric Check-Up",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vaccination",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blood Test",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Physical Therapy Session",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Specialist Consultation",
                            Price = 100.00m
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PLZ")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regensburg",
                            PLZ = "93047"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neumarkt in der Oberpfalz",
                            PLZ = "92318"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Amberg",
                            PLZ = "92224"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sulzbach-Rosenberg",
                            PLZ = "92237"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leuchtenberg",
                            PLZ = "92703"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regensburg-West",
                            PLZ = "93059"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Berching",
                            PLZ = "92334"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Schwandorf",
                            PLZ = "92421"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Beilngries",
                            PLZ = "92339"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hirschau",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Freudenberg",
                            PLZ = "92271"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Postbauer-Heng",
                            PLZ = "92353"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vohenstrauß",
                            PLZ = "92718"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Wenzenbach",
                            PLZ = "93073"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oberviechtach",
                            PLZ = "92442"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cham",
                            PLZ = "93413"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bad Kötzting",
                            PLZ = "93444"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ensdorf",
                            PLZ = "92266"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Neunburg vorm Wald",
                            PLZ = "92431"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Barbing",
                            PLZ = "93092"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wiesau",
                            PLZ = "92699"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bodenwöhr",
                            PLZ = "92439"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "335555aa-3095-43fa-8814-a38f7f82fdb0",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "98812fb7-dccf-4d94-a4df-763a19d14de1",
                            RoleId = "335555aa-3095-43fa-8814-a38f7f82fdb0"
                        },
                        new
                        {
                            UserId = "4d058864-36b6-4b9b-816d-4268dc6f5a29",
                            RoleId = "335555aa-3095-43fa-8814-a38f7f82fdb0"
                        },
                        new
                        {
                            UserId = "e28ab9f3-d2f2-4113-bf21-c384a607bba7",
                            RoleId = "335555aa-3095-43fa-8814-a38f7f82fdb0"
                        },
                        new
                        {
                            UserId = "4400e765-e75d-41ca-a99e-e0b0f007b505",
                            RoleId = "335555aa-3095-43fa-8814-a38f7f82fdb0"
                        },
                        new
                        {
                            UserId = "45397492-a4b8-4114-88d2-26cd7d598b6d",
                            RoleId = "335555aa-3095-43fa-8814-a38f7f82fdb0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "98812fb7-dccf-4d94-a4df-763a19d14de1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6f7eb52-d5ae-4d2e-8ec1-4a262d2ac799",
                            Email = "doctor1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkYcRpy4jPruuxANSjLERb9PXYV+4Ycy8aXeqJCBrl5MUyafHxurpNg8eMnRFHMxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95e536c5-51bd-4414-9d24-b2e84e3a920c",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@example.com",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "John",
                            Lastname = "Doe",
                            Street = "123 Elm Street",
                            TownId = 1
                        },
                        new
                        {
                            Id = "4d058864-36b6-4b9b-816d-4268dc6f5a29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "708917d4-918a-4c2b-944d-53e60e8fde6d",
                            Email = "doctor2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuyEtN3HieChsVb1K7/QXX3ZVcPkim6itNsxIj1ToFJtkm2yLEdmJ+NUJNQPiDPDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fb8ec3d-6433-41d3-b572-746674ed7e23",
                            TwoFactorEnabled = false,
                            UserName = "doctor2@example.com",
                            Birthdate = new DateTime(1985, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Street = "456 Oak Avenue",
                            TownId = 2
                        },
                        new
                        {
                            Id = "e28ab9f3-d2f2-4113-bf21-c384a607bba7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4c83ee9-8f46-4608-bf31-39717691b7e5",
                            Email = "doctor3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDhnIW0x+GmelvlAsRXVGcgqqrnjgcrOA9VVxfKujmx4elcU0aG2YZvKPwT6cjKUbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3cbf398-07cf-4f69-ad09-d98d96367249",
                            TwoFactorEnabled = false,
                            UserName = "doctor3@example.com",
                            Birthdate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Emily",
                            Lastname = "Johnson",
                            Street = "789 Pine Lane",
                            TownId = 3
                        },
                        new
                        {
                            Id = "4400e765-e75d-41ca-a99e-e0b0f007b505",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a2f0d56-85ee-4581-94ba-ca05338a7b80",
                            Email = "doctor4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvBNLaQXnIb5fKHbaKmk1T0nlxnL3ufoaNslpkX2yHM4W3nGYx9tYBrl6cQdqvvPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "236e2277-18b6-4353-b5b1-c2c8bcf7ee23",
                            TwoFactorEnabled = false,
                            UserName = "doctor4@example.com",
                            Birthdate = new DateTime(1975, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Michael",
                            Lastname = "Brown",
                            Street = "321 Maple Court",
                            TownId = 4
                        },
                        new
                        {
                            Id = "45397492-a4b8-4114-88d2-26cd7d598b6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a2abe18-d1c6-4553-a2e2-c37c4f4629a3",
                            Email = "doctor5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR5@EXAMPLE.COM",
                            NormalizedUserName = "DOCTOR5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMVM0X8mD8YJERY0x17X/1L14G8mY28/RRSNXpPrhvDcxtxmmzbFeP+XZVtGmm9/NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3dee06-49fd-46a0-8bb1-62551041e6e5",
                            TwoFactorEnabled = false,
                            UserName = "doctor5@example.com",
                            Birthdate = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Firstname = "Sarah",
                            Lastname = "Davis",
                            Street = "654 Birch Blvd",
                            TownId = 5
                        });
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.DoctorPatientService", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MedicDomusLK.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicDomusLK.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MedicDomusLK.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });
#pragma warning restore 612, 618
        }
    }
}
